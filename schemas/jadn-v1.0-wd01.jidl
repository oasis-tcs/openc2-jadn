       title: "JADN Metaschema"
     package: "http://oasis-open.org/jadn/v1.0/schema"
 description: "Syntax of a JSON Abstract Data Notation (JADN) package."
     exports: ["Schema"]
      config: {"$FieldName": "^[$A-Za-z][_A-Za-z0-9]{0,31}$"}

Schema = Record                                        // Definition of a JADN package
   1 info             Information optional             // Information about this package
   2 types            Types                            // Types defined in this package

Information = Map                                      // Information about this package
   1 package          Namespace                        // Unique name/version of this package
   2 version          String{1..*} optional            // Incrementing version within package
   3 title            String{1..*} optional            // Title
   4 description      String{1..*} optional            // Description
   5 comment          String{1..*} optional            // Comment
   6 copyright        String{1..*} optional            // Copyright notice
   7 license          String{1..*} optional            // SPDX licenseId (e.g., 'CC0-1.0') for this package
   8 namespaces       Namespaces optional              // Referenced packages
   9 exports          Exports optional                 // Type definitions exported by this package
  10 config           Config optional                  // Configuration values for this package

Namespaces = MapOf(NSID, Namespace){1..*}              // Packages containing referenced type definitions

Exports = ArrayOf(TypeName){1..*}                      // List of type definitions intended to be referenced

Config = Map{1..*}                                     // Configuration variables used to override JADN defaults
   1 $MaxBinary       Integer{1..*} optional           // Schema default maximum number of octets
   2 $MaxString       Integer{1..*} optional           // Schema default maximum number of characters
   3 $MaxElements     Integer{1..*} optional           // Schema default maximum number of items/properties
   4 $Sys             String{1..1} optional            // System character for TypeName
   5 $TypeName        String{1..127} optional          // TypeName regex
   6 $FieldName       String{1..127} optional          // FieldName regex
   7 $NSID            String{1..127} optional          // Namespace Identifier regex

Types = ArrayOf(Type)

Type = Array
   1  TypeRef                                          // type_name::
   2  BaseType                                         // base_type::
   3  Options                                          // type_options::
   4  Description                                      // type_description::
   5  JADN-Type(TagId[base_type])                      // fields::

BaseType = Enumerated
   1 Binary
   2 Boolean
   3 Integer
   4 Number
   5 Null
   6 String
   7 Enumerated
   8 Choice
   9 Array
  10 ArrayOf
  11 Map
  12 MapOf
  13 Record

JADN-Type = Choice
   1 Binary           Empty
   2 Boolean          Empty
   3 Integer          Empty
   4 Number           Empty
   5 Null             Empty
   6 String           Empty
   7 Enumerated       Items
   8 Choice           Fields
   9 Array            Fields
  10 ArrayOf          Empty
  11 Map              Fields
  12 MapOf            Empty
  13 Record           Fields

Empty = Array{0..0}

Items = ArrayOf(Item)

Item = Array
   1  FieldID                                          // item_id::
   2  String                                           // item_value::
   3  Description                                      // item_description::

Fields = ArrayOf(Field)

Field = Array
   1  FieldID                                          // field_id::
   2  FieldName                                        // field_name::
   3  TypeRef                                          // field_type::
   4  Options                                          // field_options::
   5  Description                                      // field_description::

FieldID = Integer{0..*}

Options = ArrayOf(Option){0..10}

Option = String{1..*}

Description = String

Namespace = String /uri                                // Unique name of a package

NSID = String{pattern="$NSID"}                         // Configurable pattern, default = ^[A-Za-z][A-Za-z0-9]{0,7}$

TypeName = String{pattern="$TypeName"}                 // Configurable pattern, default = ^[A-Z][-$A-Za-z0-9]{0,31}$

FieldName = String{pattern="$FieldName"}               // Configurable pattern, default = ^[a-z][_A-Za-z0-9]{0,31}$

TypeRef = String                                       // Autogenerated Type Reference pattern = ($NSID ':')? $TypeName
